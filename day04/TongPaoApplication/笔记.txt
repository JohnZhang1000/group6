****第一周知识点重点:
	1.项目提交到仓库
	2.MVP	抽取/封装
	3.项目朱布局框架搭建出来,实现项目首页功能
	
	
	                                                       day1（12.15）

             技术文档:
	1.接口文档		//蓝湖(项目管理平台)
	2.需求文档		//原型设计图
	3.设计文档
	4.APP的用户手册

             Java中常用的设计模式(23种)
	1.单列模式(懒汉式	饿汉式)
	2.工厂模式(简单工厂,抽象方法,工厂方法模式,静态工厂)
	3.建造者模式
	4.观察者模式
	5.责任链模式
	6.策略模式
	7.装饰模式
	.
	.
	.
	
	
5种线程池
	1.缓存线程池
	2.定长线程池		简单工厂
	3.定时线程池
	4.单线程线程池		
	5.自定义线程池
	
	
	                                                       day2（12.16）	

	版本管理(控制)工具(三种:Git,SVN,VCS(不用了))
		1.方便项目经理查看项目进度		提交代码到仓库中
		2.进公司之后,发现代码有问题,需要撤销重新写		版本回退
		3.项目分工,然后进行合并		分支与合并

	分布式:至少有两个仓库(本地+远程)
	集中式:只有一个远程仓库

                                          git add .                     git commit -m"注释                            git  push
Git分为  工作空间(目录)-------------->暂存区--------------------------->本地仓库----------------->远程仓库(github,gitee码云)
     工作区
     暂存区
     仓库区(本地仓库)
     远程仓库
	
	
具体用法:
       1.配置git用户名和邮箱
    git config --global user.name ""
                   用户名HXD
github用户名:HXD0908
github用户名:hxd13546449637
       2.配置邮箱
   git config --global user.email ""
       邮箱2486985510@qq.com
       3.验证用户名和邮箱        
          git config user.name
          git config user.email
	
使用步骤:
	
	1. 初始化命令
              get init
             注意:需要现将本地工作空间中所有文件提交到本地仓库才能往远程仓库提交

	2. 将工作空间里所有的文件和文件夹都提交到暂存区
              git add .

            3.  通过命令查看提交的所有文件状态    红色带包未提交到暂存区    绿色代表已经存到暂存区了,但没有保存到远程仓库, 代表已经提交完成了
               git status         

              4. 将暂存区的文件提交到本地仓库
              git commit -m "注释(自己命名)"

               5.  查看每次提交到本地仓库的版本号(版本号是随机生成的一个字符串)
               git reflog

               6. 回退到上一个版本                     
git reset --hard HEAD^      
 回退到上上个版本                
git reset --hard HEAD^^

                7.回退到某一个版本号
	git reset --hard 系统随机生成的版本号    
          git reset --hard 回退的具体那么它就出来了

*****多往本地 仓库提交，注释写好，修改一次提交一次，实现功能提交一次

设置关联远程仓库：
               1.生成ssh秘钥：
              ssh-keygen -t rsa -C "自己的邮箱"

                2.git关联远程仓库命令
             git remote add origin git@github.com:HXD0908/-.git
               
              3.要先拉取代码
              git pull origin  master     (这里需要注意是master分支还是main分支)
              git fetch origin master    (这里需要注意是master分支还是main分支)

                 4. 把本地仓库的项目提交到远程仓库
              git push -u origin master
                               5.如果上面的拉取代码方式不行，只要创建一个空目录，然后通过
              git clone https://github.com/HanHu0405/HiTiger3.git
              命令将远程仓库里的所有文件包括readme.md文件都下载到本地工作空间
              然后把项目复制到这个目录里，先提交到暂停区，再提交到本地仓库， 然后一                                           并再提交到远程仓库

        添加到别人库的步骤：
1.git init
2.查询所有目录
3.git add .    添加到暂存库
4.查寻状态
5.添加到本地仓库 commit
6.连接她的库地址
7.把本地仓库的项目提交到远程仓库

	
	
	                                                       day3（12.17）	
	
查看分支
git branch
切换分支(星星在哪个左边就是哪个分支)
          切换到main分支
git checkout -b main
          切换到main分支
git checkout master
          创建新的子分支
git checkout -b dev
          合并分支
                  先切换分支后合并分支
git merge dev
          删除分支
git push origin -d BranchName
*****总结（上班第一天及以后每天要做的）：

          上班第一天：

     1.初始化
     2.克隆：仓库地址
     3.把原先的隐藏文件git删掉
     4.打开克隆到的文件夹，查看状态（不能删README）
     5.切换分支    创建并切换分支Dev
     6.查看所有分支
     7.修改代码
     8.查看状态
     9.添加add .
     10.提交到本地仓库注释“修改了****"（修改一次，提交一次，实现一个功能提交一次）
     11.查看状态
     12.提交
     13.查看状态
     14.关联远程仓库命令     地址
     15.切换到主分支
     16.合并分支
     17.查看状态
     18.推送（push）到远程仓库账号密码

           上班第二天及以后只需要：

     1.拉取（pull）
     2.查看分支
     3.切换分支
     4.修改功能，修复bug
     5.查看状态
     6.添加到本地   add .
     7.切换到主分支
     8.合并分支    get  merge dev
     9.查看状态
     10.提交到远程仓库

注意： 第一天进公司
           拿到仓库地址不管远程仓库有没有代码
           先把远程仓库的分支克隆到本地
           然后切换到子分支
           然后在子分支里面写代码
           修复bug   实现一个功能 提交到本地仓库一次      
           晚上下班之前再切换到主分支
           然后合并子分支，
           最后提交到远程仓库

            git pull origin main(远程分支名) --allow-unrelated-histories
           以后到公司上班
           早上第一件事 
           先从远程仓库拉取代码
           拉取到代码之后
           再切换到子分支
           然后一实现功能
           修复bug 实现一个功能
           提交本地仓库一次
           晚上下班之间再切换到主分支
           然后合并子分支，最后提交到远程仓库

两个人的代码修改后上传，发生冲突时协商解决看到底用谁的代码（可以用一个人的，也可以两个人的代码都留着）

===================>SVN<=================
安装步骤：
       1.VISUALSVN SERVER
       2.一直下一步就行，
       3.安装完后鼠标右击会有2个
注意：如果发生冲突把弹出来的东西都删掉然后重新提交即可


	                                                       day4（12.18）


工具：Sourcetree  用来代替git的不是代替SVN的
           1.点击clone
                 第一行是源路径
                 第二行目标路径，将要存储克隆的地址
                 点击克隆

             合并应该先切换到主分支，然后点击上面的合并，选中要合并的分支


图片格式：.9.png（不管如何拉伸如何压缩都不会变形）  button按钮的纯色背景图，标题栏的背景图做    .9.png  图片的时候    左边的黑线控制纵向拉伸区域
               上边的黑线控制横向拉伸区域
               下边的黑线控制横向内容显示区域
               右边的黑线控制纵向内容显示区域

图片适配：
       



布局适配：
       px适配,dp适配(最小宽度限定符适配)  今日头条适配方案



屏幕适配：
每种手机的屏幕大小都不一样，经过适配，让不同的手机显示一样的内容

全域罗盘       流量研究院

目录：                                                       密度（dpi）                         分辨率（单位是px）                                     单位是dp
xxxhdpi                                                        640                           
xxhdpi         @3X（三倍图）                     480              3                   1080*1920                                                           =360 * 640   dp
xhdpi           @2X  （二倍图）                   320              2                   720*1280            768*1280                                  =360 * 640                 =384 * 640
hdpi                                                             240             1.5                  480*800              480*854                                    
mdpi            @1X  （一倍图）                  160               1                   320*480                                                               
idpi                                                              120              0.75               240*320              240*400

密度比：12    16     24    32    48     ===       3：4：6：8：12     ===     0.75   ：1   ：1.5   ： 2   ：3
        
美工切三套图标    @1X  （一倍图）  @2X  （二倍图）  @3X（三倍图）
高分辨率的图放在低分辨率的目录里  会出现  图标会放大拉伸
低分辨率的图放在高分辨率的目录里  会出现  图标会压缩缩小
drawable里面放入一些APP图标资源       mipmap里放APP的logo图标

真实开发的时候：三套图标或者两套图标      图标（放到对应的目录下面）+背景图（一般放到drawable-hdpi或drawable-xhdpi下面就行）

单位和分辨率的关系：

在mdpi   320*480   分辨率下  1dp = 1px
在hdpi    480*800   分辨率下  1dp=1.5px
在xhdpi   720*1280   分辨率下  1dp = 2px
以此类推。。。

主流分辨率：1080*1920     720*1280
蓝湖   账号密码（app原型图，接口文档，需求文档）


原先你们公司是以哪个分辨率为基准做的原型图：
                             一定要看一下流量研究院主流分辨率是多少，确定主流分辨率后告诉美工之前的公司以主流分辨率为基准做的原型图

1.明确原型图 的分辨率是多少
        根据原型图做布局适配


drawable里面放入一些APP切图图标资源，mipmap里面放入APP的logo图标
真实开发的时候：需要三套图或两套图       图标（放入对应的目录下面）+背景图（一般放到drawable-hdpi下或者drawable-xhdpi下面就行）


	                                                       day5（12.19）

公司的原型图  是 750 * 1440（基准）

注意：
           把两个包放在main目录下：
           拷贝地址，
           通过命令行打开文件夹，
           在java后面配置比例参数，小的在前面，大的在后面
           注意：最前面是基准，后面是适配主流的分辨率的屏幕


dp适配
           原型图上标注的有三种单位  三种单位是可以切换的    px  dp  pt 
           原型图分辨率 为 480 * 800 时 1px = 67dp

           dp适配原理和px适配是一样的 不过是等比缩放 

           密度值 (widthPixels / density)

           dp : 默认第一个为基准项 

           dp值有小数
           px值没有小数

           注 : 此适配不全是整数 还有小数类型
                  80%的手机类型基本都是360dp的 其他20%的用户使用的机型比较特殊
                 因此需要手动配置  将每个整数的小数位都从.1到.9全部手动加一次
                 然后重新生成所有的适配文件 这样在将来的使用中即可匹配基本所有手机类型 



























































